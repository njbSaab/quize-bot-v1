const questions = require("../questions/questions");
const fs = require("fs");
const path = require("path");

const stateFilePath = path.join(__dirname, "../data/userStates.json");

module.exports = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.action(/answer_\d+/, async (ctx) => {
    try {
      const questionIndex = ctx.session.questionIndex || 0;
      if (questionIndex >= questions.length) {
        await ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!");
        return;
      }

      const selectedOptionIndex = parseInt(ctx.match[0].split("_")[1]);
      const question = questions[questionIndex];
      const isCorrect =
        question.options[selectedOptionIndex] === question.correctAnswer;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const userId = ctx.from.id;
      const userSession = findUserSession(ctx, userId);
      if (userSession) {
        userSession.data.answeredQuestions++;
        userSession.data.totalQuestions = questions.length;
        if (isCorrect) {
          userSession.data.correctAnswers++;
        }
        saveUserState(ctx, userSession);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(`User ID: ${userId}`);
        console.log(`Correct Answers: ${userSession.data.correctAnswers}`);
        console.log(
          `Answered Questions: ${userSession.data.answeredQuestions}`
        );
        console.log(`Total Questions: ${userSession.data.totalQuestions}`);
      }

      await ctx.reply(
        isCorrect
          ? "–û—Ç–ª–∏—á–Ω–æ, –≤—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –ø–æ–±–µ–¥–µ üëç"
          : "–ù–µ–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ ‚úÖ"
      );

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      ctx.session.questionIndex = questionIndex + 1;
      if (ctx.session.questionIndex < questions.length) {
        await startQuiz(ctx);
      } else {
        await ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:", err);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  bot.action("back", async (ctx) => {
    try {
      const questionIndex = ctx.session.questionIndex || 0;
      if (questionIndex > 0) {
        ctx.session.questionIndex = questionIndex - 1;
        await ctx.reply("–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.");
        await startQuiz(ctx);
      } else {
        await ctx.reply(
          "–ú—ã –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –≤—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ. –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
          {
            reply_markup: {
              inline_keyboard: [[{ text: "–í—ã–π—Ç–∏", callback_data: "exit" }]],
            },
          }
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥':", err);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"
  bot.action("exit", async (ctx) => {
    try {
      await ctx.reply(
        "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
      );
      ctx.session.questionIndex = 0; // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏':", err);
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function startQuiz(ctx) {
  const questionIndex = ctx.session.questionIndex || 0;
  if (questionIndex >= questions.length) {
    await ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!");
    return;
  }

  const question = questions[questionIndex];
  const optionsMarkup = {
    reply_markup: {
      inline_keyboard: [
        ...question.options.reduce((acc, option, index) => {
          const rowIndex = Math.floor(index / 2);
          if (!acc[rowIndex]) {
            acc[rowIndex] = [];
          }
          acc[rowIndex].push({
            text: option,
            callback_data: `answer_${index}`,
          });
          return acc;
        }, []),
        [{ text: "–ù–∞–∑–∞–¥", callback_data: "back" }],
        // [{ text: "–í—ã–π—Ç–∏", callback_data: "exit" }],
      ],
    },
  };
  await ctx.reply(question.question, optionsMarkup);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function findUserSession(ctx, userId) {
  if (fs.existsSync(stateFilePath)) {
    const data = fs.readFileSync(stateFilePath, "utf8");
    try {
      const userStates = JSON.parse(data);
      return userStates.sessions.find((session) => session.id === userId);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", err);
    }
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserState(ctx, userSession) {
  if (fs.existsSync(stateFilePath)) {
    const data = fs.readFileSync(stateFilePath, "utf8");
    try {
      const userStates = JSON.parse(data);
      const sessionIndex = userStates.sessions.findIndex(
        (session) => session.id === userSession.id
      );
      if (sessionIndex !== -1) {
        userStates.sessions[sessionIndex] = userSession;
        fs.writeFileSync(
          stateFilePath,
          JSON.stringify(userStates, null, 2),
          "utf8"
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", err);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é startQuiz –æ—Ç–¥–µ–ª—å–Ω–æ
module.exports.startQuiz = startQuiz;
